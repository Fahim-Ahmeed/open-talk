{"version":3,"sources":["logo.svg","Components/NotFound/NotFound.js","Components/Post/Post.js","Components/Header/Header.js","Components/Home/Home.js","Components/CommentArea/CommentArea.js","Components/Comments/Comments.js","Components/PostDetails/PostDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NotFound","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Post","props","post","userId","id","body","classes","className","Card","variant","CardContent","Typography","color","gutterBottom","component","CardActions","to","Button","size","theme","flexGrow","menuButton","marginRight","spacing","Header","AppBar","position","Toolbar","IconButton","edge","aria-label","Home","useState","setPost","useEffect","fetch","then","res","json","data","map","key","width","maxWidth","backgroundColor","palette","background","paper","inline","CommentArea","comment","email","postId","name","number","Math","floor","random","List","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Fragment","Comments","comments","setComments","style","borderBottom","paddingBottom","PostDetails","useParams","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f6773fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>\r\n            <h2>page  can't be found</h2>\r\n            <h3>error:404</h3>       \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Link } from 'react-router-dom';\r\nimport './Post.css';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '2px 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 30,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\n\r\nconst Post = (props) => {\r\n    // console.log(props.post);\r\n    const { userId, title, id, body } = props.post;\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>â€¢</span>;\r\n    return (\r\n\r\n        <div className=\"area\">\r\n            <Card className={classes.root} variant=\"outlined\">\r\n                <CardContent>\r\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                       id:{id}\r\n                        </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {title}\r\n                    </Typography>\r\n                    <br />\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        {body}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    {/* <Button size=\"small\">Learn More</Button> */}\r\n                    <Link to={'/post/' + id} >\r\n                        {/* <Button variant=\"contained\" color=\"primary\">\r\n                            view comments\r\n                        </Button> */}\r\n                        <Button size=\"small\" className=\"button\">View Comment</Button>\r\n                    </Link>\r\n                </CardActions>\r\n                \r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Public Post\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useEffect, useState } from 'react';\r\nimport Post from '../Post/Post'\r\nimport Header from '../Header/Header';\r\nimport './Home.css';\r\n\r\n\r\n\r\nconst Home = () => {  \r\n    const [post,setPost]=useState([])\r\n    useEffect(()=>{\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res=>res.json())\r\n        .then(data=>setPost(data))\r\n    },[])\r\n    return(\r\n        <div className=\"home\">\r\n            <Header></Header>\r\n         {\r\n             post.map(post=><Post post={post} key={post.id}></Post>)\r\n         }\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n//material ui import\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: '36ch',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\nconst CommentArea = (props) => {\r\n    //material ui\r\n    const classes = useStyles();\r\n    // console.log(props.comment)\r\n    const{id,postId,email,body,name}=props.comment;\r\n    // console.log(name)\r\n    let number=Math.floor(Math.random()*99);\r\n    return (\r\n        <div>\r\n            <List className={classes.root}>\r\n      <ListItem alignItems=\"flex-start\">\r\n        <ListItemAvatar>\r\n          <Avatar alt=\"Remy Sharp\" src={`https://randomuser.me/api/portraits/men/${number}.jpg`} />\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          primary={name}\r\n          secondary={\r\n            <React.Fragment>\r\n              <Typography\r\n                component=\"span\"\r\n                variant=\"body2\"\r\n                className={classes.inline}\r\n                color=\"textPrimary\"\r\n              >\r\n                  id:{`${id}   `} \r\n              \r\n              </Typography>\r\n          <h5>email:{email}</h5>\r\n              {body}\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </ListItem>\r\n     \r\n      \r\n    </List>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CommentArea;","import React, { useEffect, useState } from 'react';\r\nimport CommentArea from '../CommentArea/CommentArea';\r\n\r\nconst Comments = (props) => {\r\n    const postId=props.postId;\r\n    // console.log(postId)\r\n\r\n    const[comments,setComments]=useState([]);\r\n    useEffect(()=>{\r\n        fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`)\r\n        .then(res=>res.json())\r\n        .then(data=>setComments(data))\r\n    },[])\r\n    // const allComments=(comments.length)\r\n    return (\r\n        <div>\r\n            <h6 style={{borderBottom: '1px solid lightgray',paddingBottom:'20px'}}> view all comments</h6>\r\n            {\r\n            comments.map(comment =><CommentArea comment={comment}></CommentArea>)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './PostDetails.css';\r\nimport Comments from '../Comments/Comments';\r\n\r\nconst PostDetails = () => {\r\n    const { id } = useParams();\r\n    const [post, setPost] = useState([]);\r\n    useEffect(() => {\r\n        fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)\r\n            .then(res => res.json())\r\n            .then(data => setPost(data))\r\n    }, []);\r\n    // console.log(post.id)\r\n    return (\r\n        <div className=\"total-area\">\r\n            <div className=\"post-area\">\r\n                <h2>id:{post.id}</h2>\r\n                <h3>heading:{post.title}</h3>\r\n                <hr />\r\n                <h5>{post.body}</h5>\r\n                <br/>\r\n                \r\n            </div>\r\n            <Comments postId={id}></Comments>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostDetails;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NotFound from './Components/NotFound/NotFound'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './Components/Home/Home';\nimport PostDetails from './Components/PostDetails/PostDetails';\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n      <Route path=\"/home\">\n      <Home></Home>\n      </Route>\n      <Route path=\"/post/:id\">\n        <PostDetails></PostDetails>\n      </Route>\n      <Route exact path=\"/\">\n      <Home></Home>\n      </Route>\n      <Route path=\"*\">\n      <NotFound></NotFound>\n      </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}